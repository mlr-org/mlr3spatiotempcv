% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ResamplingSpCVBuffer.R
\name{mlr_resamplings_spcv_buffer}
\alias{mlr_resamplings_spcv_buffer}
\alias{ResamplingSpCVBuffer}
\title{(blockCV) Spatial buffering resampling}
\description{
This function generates spatially separated train and test folds by considering buffers of
the specified distance (\code{size} parameter) around each observation point.
This approach is a form of \emph{leave-one-out} cross-validation. Each fold is generated by excluding
nearby observations around each testing point within the specified distance (ideally the range of
spatial autocorrelation, see \code{\link[blockCV]{cv_spatial_autocor}}). In this method, the testing set never
directly abuts a training sample (e.g. presence or absence; 0s and 1s). For more information see the details section.
}
\details{
When working with presence-background (presence and pseudo-absence) species distribution
data (should be specified by \code{presence_bg = TRUE} argument), only presence records are used
for specifying the folds (recommended). Consider a target presence point. The buffer is defined around this target point,
using the specified range (\code{size}). By default, the testing fold comprises only the target presence point (all background
points within the buffer are also added when \code{add_bg = TRUE}).
Any non-target presence points inside the buffer are excluded.
All points (presence and background) outside of buffer are used for the training set.
The methods cycles through all the \emph{presence} data, so the number of folds is equal to
the number of presence points in the dataset.

For presence-absence data (and all other types of data), folds are created based on all records, both
presences and absences. As above, a target observation (presence or absence) forms a test point, all
presence and absence points other than the target point within the buffer are ignored, and the training
set comprises all presences and absences outside the buffer. Apart from the folds, the number
of \emph{training-presence}, \emph{training-absence}, \emph{testing-presence} and \emph{testing-absence}
records is stored and returned in the \code{records} table. If \code{column = NULL} and \code{presence_bg = FALSE},
the procedure is like presence-absence data. All other data types (continuous, count or multi-class responses) should be
done by \code{presence_bg = FALSE}.
}
\section{{mlr3spatiotempcv} notes}{


The 'Description' and 'Details' fields are inherited from the respective
upstream function.
For a list of available arguments, please see \link[blockCV:cv_buffer]{blockCV::cv_buffer}.

\code{blockCV} >= 3.0.0 changed the argument names of the implementation. For backward compatibility, \code{mlr3spatiotempcv} is still using the old ones.
Here's a list which shows the mapping between \code{blockCV} < 3.0.0 and \code{blockCV} >= 3.0.0:
\itemize{
\item \code{theRange} -> \code{size}
\item \code{addBG} -> \code{add_bg}
\item \code{spDataType} (character vector) -> \code{presence_bg} (boolean)
}
}

\examples{
\donttest{
if (mlr3misc::require_namespaces(c("sf", "blockCV"), quietly = TRUE)) {
  library(mlr3)
  task = tsk("ecuador")

  # Instantiate Resampling
  rcv = rsmp("spcv_buffer", theRange = 10000)
  rcv$instantiate(task)

  # Individual sets:
  rcv$train_set(1)
  rcv$test_set(1)
  intersect(rcv$train_set(1), rcv$test_set(1))

  # Internal storage:
  # rcv$instance
}
}
}
\references{
Valavi R, Elith J, Lahoz-Monfort JJ, Guillera-Arroita G (2018).
\dQuote{blockCV: an R package for generating spatially or environmentally separated folds for k-fold cross-validation of species distribution models.}
\emph{bioRxiv}.
\doi{10.1101/357798}.
}
\seealso{
ResamplingSpCVDisc
}
\section{Super class}{
\code{\link[mlr3:Resampling]{mlr3::Resampling}} -> \code{ResamplingSpCVBuffer}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{iters}}{\code{integer(1)}\cr
Returns the number of resampling iterations, depending on the
values stored in the \code{param_set}.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-ResamplingSpCVBuffer-new}{\code{ResamplingSpCVBuffer$new()}}
\item \href{#method-ResamplingSpCVBuffer-instantiate}{\code{ResamplingSpCVBuffer$instantiate()}}
\item \href{#method-ResamplingSpCVBuffer-clone}{\code{ResamplingSpCVBuffer$clone()}}
}
}
\if{html}{\out{
<details open><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Resampling" data-id="format"><a href='../../mlr3/html/Resampling.html#method-Resampling-format'><code>mlr3::Resampling$format()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Resampling" data-id="help"><a href='../../mlr3/html/Resampling.html#method-Resampling-help'><code>mlr3::Resampling$help()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Resampling" data-id="print"><a href='../../mlr3/html/Resampling.html#method-Resampling-print'><code>mlr3::Resampling$print()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Resampling" data-id="test_set"><a href='../../mlr3/html/Resampling.html#method-Resampling-test_set'><code>mlr3::Resampling$test_set()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Resampling" data-id="train_set"><a href='../../mlr3/html/Resampling.html#method-Resampling-train_set'><code>mlr3::Resampling$train_set()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ResamplingSpCVBuffer-new"></a>}}
\if{latex}{\out{\hypertarget{method-ResamplingSpCVBuffer-new}{}}}
\subsection{Method \code{new()}}{
Create an "Environmental Block" resampling instance.

For a list of available arguments, please see
\code{\link[blockCV:cv_buffer]{blockCV::cv_buffer()}}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ResamplingSpCVBuffer$new(id = "spcv_buffer")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{\code{character(1)}\cr
Identifier for the resampling strategy.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ResamplingSpCVBuffer-instantiate"></a>}}
\if{latex}{\out{\hypertarget{method-ResamplingSpCVBuffer-instantiate}{}}}
\subsection{Method \code{instantiate()}}{
Materializes fixed training and test splits for a given task.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ResamplingSpCVBuffer$instantiate(task)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{task}}{\link[mlr3:Task]{mlr3::Task}\cr
A task to instantiate.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ResamplingSpCVBuffer-clone"></a>}}
\if{latex}{\out{\hypertarget{method-ResamplingSpCVBuffer-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ResamplingSpCVBuffer$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
